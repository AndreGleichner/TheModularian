<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1094px" preserveAspectRatio="none" style="width:2609px;height:1094px;background:#FFFFFF;" version="1.1" viewBox="0 0 2609 1094" width="2609px" zoomAndPan="magnify"><defs/><g><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="630.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1386.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1624.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2141.5" y="47.0146"/><rect fill="#FFFFFF" height="1014.9502" style="stroke:#000000;stroke-width:1.0;" width="2577.5" x="15" y="56.0146"/><rect fill="#FFFFFF" height="457.3911" style="stroke:#000000;stroke-width:1.0;" width="2221.5" x="25" y="354.4092"/><rect fill="#FFFFFF" height="90.3979" style="stroke:#000000;stroke-width:1.0;" width="909.5" x="561" y="580.2051"/><rect fill="#FFFFFF" height="120.1973" style="stroke:#000000;stroke-width:1.0;" width="1675.5" x="561" y="684.603"/><rect fill="#FFFFFF" height="252.1646" style="stroke:none;stroke-width:1.0;" width="2577.5" x="15" y="818.8003"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="108" x2="108" y1="37.0146" y2="1087.9648"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="635" x2="635" y1="37.0146" y2="1087.9648"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1391.5" x2="1391.5" y1="37.0146" y2="1087.9648"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1629" x2="1629" y1="37.0146" y2="1087.9648"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="2146.5" x2="2146.5" y1="37.0146" y2="1087.9648"/><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="127" x="45" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="113" x="52" y="26.0752">BrokerProcess</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="109" x="581" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="95" x="588" y="26.0752">HostProcess</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="118" x="1332.5" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="104" x="1339.5" y="26.0752">NativeModule</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="175" x="1542" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="161" x="1549" y="26.0752">ManagedModuleHost</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="140" x="2076.5" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="126" x="2083.5" y="26.0752">ManagedModule</text><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="630.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1386.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1624.5" y="47.0146"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2141.5" y="47.0146"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="5" x2="2602.5" y1="48.0146" y2="48.0146"/><path d="M15,56.0146 L79,56.0146 L79,63.0146 L69,73.0146 L15,73.0146 L15,56.0146 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="1014.9502" style="stroke:#000000;stroke-width:1.0;" width="2577.5" x="15" y="56.0146"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="19" x="30" y="70.0845">alt</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="238" x="94" y="69.0737">[Send message from native module]</text><polygon fill="#000000" points="651.5,91.6133,641.5,95.6133,651.5,99.6133,647.5,95.6133" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="645.5" x2="1385.5" y1="95.6133" y2="95.6133"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="657.5" y="90.8838">38</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="376" x="679.5" y="90.8838">SendMsg(Mod, "some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="125.4126" y2="125.4126"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="125.4126" y2="138.4126"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="138.4126" y2="138.4126"/><polygon fill="#000000" points="651.5,134.4126,641.5,138.4126,651.5,142.4126,647.5,138.4126" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="120.6831">39</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="469" x="669.5" y="120.6831">NativeModule::OnMsg(Mod, "some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="168.2119" y2="168.2119"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="168.2119" y2="181.2119"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="181.2119" y2="181.2119"/><polygon fill="#000000" points="651.5,177.2119,641.5,181.2119,651.5,185.2119,647.5,181.2119" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="163.4824">40</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="710" x="669.5" y="163.4824">UniversalModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="211.0112" y2="211.0112"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="211.0112" y2="224.0112"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="224.0112" y2="224.0112"/><polygon fill="#000000" points="651.5,220.0112,641.5,224.0112,651.5,228.0112,647.5,224.0112" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="206.2817">41</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="669.5" y="206.2817">ipc::Send("some event", target)</text><polygon fill="#000000" points="119.5,249.8105,109.5,253.8105,119.5,257.8105,115.5,253.8105" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="113.5" x2="629.5" y1="253.8105" y2="253.8105"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="125.5" y="249.0811">42</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="241" x="147.5" y="249.0811">via stdout: serialized msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="283.6099" y2="283.6099"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="283.6099" y2="296.6099"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="296.6099" y2="296.6099"/><polygon fill="#000000" points="119.5,292.6099,109.5,296.6099,119.5,300.6099,115.5,296.6099" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="115.5" y="278.8804">43</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="310" x="137.5" y="278.8804">ReadFile(stdin) =&gt; deserialize msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="326.4092" y2="326.4092"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="326.4092" y2="339.4092"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="339.4092" y2="339.4092"/><polygon fill="#000000" points="119.5,335.4092,109.5,339.4092,119.5,343.4092,115.5,339.4092" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="115.5" y="321.6797">44</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="374" x="137.5" y="321.6797">BrokerInstance::OnMessage("some event", target)</text><path d="M25,354.4092 L101,354.4092 L101,361.4092 L91,371.4092 L25,371.4092 L25,354.4092 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="457.3911" style="stroke:#000000;stroke-width:1.0;" width="2221.5" x="25" y="354.4092"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="31" x="40" y="368.479">loop</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="153" x="116" y="367.4683">[for all host processes]</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="394.0078" y2="394.0078"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="394.0078" y2="407.0078"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="407.0078" y2="407.0078"/><polygon fill="#000000" points="119.5,403.0078,109.5,407.0078,119.5,411.0078,115.5,407.0078" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="115.5" y="389.2783">45</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="307" x="137.5" y="389.2783">ChildProcess::Send("some event", target)</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="436.8071" y2="436.8071"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="436.8071" y2="449.8071"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="449.8071" y2="449.8071"/><polygon fill="#000000" points="119.5,445.8071,109.5,449.8071,119.5,453.8071,115.5,449.8071" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="115.5" y="432.0776">46</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="137.5" y="432.0776">ipc::Send("some event", target)</text><polygon fill="#000000" points="618.5,475.6064,628.5,479.6064,618.5,483.6064,622.5,479.6064" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="624.5" y1="479.6064" y2="479.6064"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="115.5" y="474.877">47</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="241" x="137.5" y="474.877">via stdout: serialized msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="509.4058" y2="509.4058"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="509.4058" y2="522.4058"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="522.4058" y2="522.4058"/><polygon fill="#000000" points="651.5,518.4058,641.5,522.4058,651.5,526.4058,647.5,522.4058" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="504.6763">48</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="310" x="669.5" y="504.6763">ReadFile(stdin) =&gt; deserialize msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="552.2051" y2="552.2051"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="552.2051" y2="565.2051"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="565.2051" y2="565.2051"/><polygon fill="#000000" points="651.5,561.2051,641.5,565.2051,651.5,569.2051,647.5,565.2051" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="547.4756">49</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="348" x="669.5" y="547.4756">UniversalModuleHost::OnMessageFromBroker()</text><path d="M561,580.2051 L637,580.2051 L637,587.2051 L627,597.2051 L561,597.2051 L561,580.2051 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="90.3979" style="stroke:#000000;stroke-width:1.0;" width="909.5" x="561" y="580.2051"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="31" x="576" y="594.2749">loop</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="155" x="652" y="593.2642">[for all native modules]</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="619.8037" y2="619.8037"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="619.8037" y2="632.8037"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="632.8037" y2="632.8037"/><polygon fill="#000000" points="651.5,628.8037,641.5,632.8037,651.5,636.8037,647.5,632.8037" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="615.0742">50</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="159" x="669.5" y="615.0742">NativeModule::Send()</text><polygon fill="#000000" points="1374.5,658.603,1384.5,662.603,1374.5,666.603,1378.5,662.603" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="1380.5" y1="662.603" y2="662.603"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="657.8735">51</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="330" x="669.5" y="657.8735">Native.dll/OnMessage("some event", target)</text><path d="M561,684.603 L630,684.603 L630,691.603 L620,701.603 L561,701.603 L561,684.603 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="120.1973" style="stroke:#000000;stroke-width:1.0;" width="1675.5" x="561" y="684.603"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="24" x="576" y="698.6729">opt</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="172" x="645" y="697.6621">[if any managed modules]</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="724.2017" y2="724.2017"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="724.2017" y2="737.2017"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="737.2017" y2="737.2017"/><polygon fill="#000000" points="651.5,733.2017,641.5,737.2017,651.5,741.2017,647.5,737.2017" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="719.4722">52</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="160" x="669.5" y="719.4722">ManagedHost::Send()</text><polygon fill="#000000" points="1612.5,763.001,1622.5,767.001,1612.5,771.001,1616.5,767.001" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="1618.5" y1="767.001" y2="767.001"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="762.2715">53</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="378" x="669.5" y="762.2715">ManagedHost.dll/Ipc.MessageFromHostToModule()</text><polygon fill="#000000" points="2129.5,792.8003,2139.5,796.8003,2129.5,800.8003,2133.5,796.8003" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1634.5" x2="2135.5" y1="796.8003" y2="796.8003"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="1641.5" y="792.0708">54</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="461" x="1663.5" y="792.0708">App.OnMessageFromHost("some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="15" x2="2592.5" y1="819.8003" y2="819.8003"/><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="257" x="20" y="830.8594">[Send message from managed module]</text><line style="stroke:#000000;stroke-width:1.0;" x1="2151.5" x2="2193.5" y1="855.9683" y2="855.9683"/><line style="stroke:#000000;stroke-width:1.0;" x1="2193.5" x2="2193.5" y1="855.9683" y2="868.9683"/><line style="stroke:#000000;stroke-width:1.0;" x1="2152.5" x2="2193.5" y1="868.9683" y2="868.9683"/><polygon fill="#000000" points="2162.5,864.9683,2152.5,868.9683,2162.5,872.9683,2158.5,868.9683" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="2158.5" y="851.2388">55</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="400" x="2180.5" y="851.2388">Ipc.SendMessage("some event", serviceGuid, session)</text><polygon fill="#000000" points="651.5,894.7676,641.5,898.7676,651.5,902.7676,647.5,898.7676" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="645.5" x2="2140.5" y1="898.7676" y2="898.7676"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="657.5" y="894.0381">56</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="672" x="679.5" y="894.0381">UniversalModuleHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="928.5669" y2="928.5669"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="928.5669" y2="941.5669"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="941.5669" y2="941.5669"/><polygon fill="#000000" points="651.5,937.5669,641.5,941.5669,651.5,945.5669,647.5,941.5669" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="923.8374">57</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="617" x="669.5" y="923.8374">ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="971.3662" y2="971.3662"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="971.3662" y2="984.3662"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="984.3662" y2="984.3662"/><polygon fill="#000000" points="651.5,980.3662,641.5,984.3662,651.5,988.3662,647.5,984.3662" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="966.6367">58</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="541" x="669.5" y="966.6367">UniversalModuleHost::OnMessageFromModule(null, "some event", target)</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="1014.1655" y2="1014.1655"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="1014.1655" y2="1027.1655"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="1027.1655" y2="1027.1655"/><polygon fill="#000000" points="651.5,1023.1655,641.5,1027.1655,651.5,1031.1655,647.5,1027.1655" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="647.5" y="1009.436">59</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="669.5" y="1009.436">ipc::Send("some event", target)</text><path d="M645,1040.1655 L645,1065.1655 L1099,1065.1655 L1099,1050.1655 L1089,1040.1655 L645,1040.1655 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><path d="M1089,1040.1655 L1089,1050.1655 L1099,1050.1655 L1089,1040.1655 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="433" x="651" y="1058.2354">dispatch further same as with native module as msg source</text><!--MD5=[78fe12c2f94c9aef74f103e129da7fa6]
@startuml IPC
!theme plain
hide footbox

autonumber
participant BrokerProcess as B
participant HostProcess as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant ManagedModule as MM

B->B: BrokerInstance::Init() => process broker.json
loop Launch processes
    B->B: ChildProcess::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcess::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember host target GUID
    H->H: UniversalModuleHost::OnMessageFromBroker()
    B->B: ChildProcess::LoadModules()
end
    
newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule()
    H->NM: ConnectModule(OnMsg, OnDiag)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: UniversalModuleHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: UniversalModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: BrokerInstance::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcess::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: UniversalModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: UniversalModuleHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: UniversalModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

@startuml IPC







<style>
  root {
    BackgroundColor white
    FontColor black
    FontName Verdana
    HyperLinkColor blue
    LineColor black
    LineThickness 1
    Margin 5
  }
  caption {
    LineThickness 0
  }
  footer {
    LineThickness 0
  }
  header {
    LineThickness 0
  }
  node {
    MaximumWidth 300
  }
  title {
    FontSize 22
    LineThickness 0
  }
</style>

skinparam ArrowLollipopColor black
skinparam BackgroundColor white
skinparam DefaultFontName Verdana
skinparam DefaultMonospacedFontName Courier
skinparam LifelineStrategy nosolid
skinparam ParticipantPadding 10
skinparam SequenceLifeLineBorderColor black
skinparam Shadowing false
skinparam UseBetaStyle true

skinparam Activity {
  BackgroundColor white
  BarColor black
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam Boundary {
  FontColor black
}
skinparam Box {
  Padding 5
}
skinparam CircledCharacter {
  FontColor black
  FontName Courier
  Radius 9
}
skinparam Class {
  BackgroundColor white
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam ClassAttribute {
  FontColor black
  FontName Verdana
}
skinparam ClassStereotype {
  FontColor black
  FontName Verdana
}
skinparam Footer {
  FontColor black
  FontName Verdana
}
skinparam Header {
  FontColor black
  FontName Verdana
}
skinparam Hyperlink {
  Color blue
}
skinparam IconPackage {
  Color black
  BackgroundColor white
}
skinparam IconPrivate {
  Color black
  BackgroundColor white
}
skinparam IconProtected {
  Color black
  BackgroundColor white
}
skinparam IconPublic {
  Color black
  BackgroundColor white
}
skinparam Note {
  FontColor black
  FontName Verdana
}
skinparam Object {
  BorderColor black
}
skinparam Package {
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam State {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeA {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeC {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeE {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeI {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeN {
  BackgroundColor white
  BorderColor black
}
skinparam UseCaseStereoType {
  FontColor black
  FontName Verdana
}
hide footbox

autonumber
participant BrokerProcess as B
participant HostProcess as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant ManagedModule as MM

B->B: BrokerInstance::Init() => process broker.json
loop Launch processes
    B->B: ChildProcess::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcess::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember host target GUID
    H->H: UniversalModuleHost::OnMessageFromBroker()
    B->B: ChildProcess::LoadModules()
end
    
newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule()
    H->NM: ConnectModule(OnMsg, OnDiag)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: UniversalModuleHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: UniversalModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: BrokerInstance::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcess::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: UniversalModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: UniversalModuleHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: UniversalModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

PlantUML version 1.2022.0(Tue Jan 11 17:16:42 CET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>