<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1111px" preserveAspectRatio="none" style="width:2528px;height:1111px;background:#FFFFFF;" version="1.1" viewBox="0 0 2528 1111" width="2528px" zoomAndPan="magnify"><defs/><g><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="612" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1300" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1538" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2055" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2060" y="64.0293"/><rect fill="#FFFFFF" height="1014.9502" style="stroke:#000000;stroke-width:1.0;" width="2496" x="15" y="73.0293"/><rect fill="#FFFFFF" height="457.3911" style="stroke:#000000;stroke-width:1.0;" width="2137" x="25" y="371.4238"/><rect fill="#FFFFFF" height="90.3979" style="stroke:#000000;stroke-width:1.0;" width="823" x="561" y="597.2197"/><rect fill="#FFFFFF" height="120.1973" style="stroke:#000000;stroke-width:1.0;" width="1591" x="561" y="701.6177"/><rect fill="#FFFFFF" height="252.1646" style="stroke:none;stroke-width:1.0;" width="2496" x="15" y="835.8149"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="90" x2="90" y1="54.0293" y2="1104.9795"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="617" x2="617" y1="54.0293" y2="1104.9795"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1305" x2="1305" y1="54.0293" y2="1104.9795"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1542.5" x2="1542.5" y1="54.0293" y2="1104.9795"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="2060" x2="2060" y1="54.0293" y2="1104.9795"/><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="90" x="45" y="22.0146"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="76" x="52" y="43.0898">TMBroker</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="72" x="581" y="22.0146"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="58" x="588" y="43.0898">TMHost</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="118" x="1246" y="22.0146"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="104" x="1253" y="43.0898">NativeModule</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="175" x="1455.5" y="22.0146"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="161" x="1462.5" y="43.0898">ManagedModuleHost</text><rect fill="#FFFFFF" height="48.0293" style="stroke:#000000;stroke-width:1.0;" width="144" x="1988" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="126" x="1997" y="26.0752">ManagedModule</text><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="130" x="1995" y="43.0898">SomeAppModule</text><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="612" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1300" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="1538" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2055" y="64.0293"/><rect fill="#FFFFFF" height="1031.9502" style="stroke:#000000;stroke-width:1.0;" width="10" x="2060" y="64.0293"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="5" x2="2521" y1="65.0293" y2="65.0293"/><path d="M15,73.0293 L79,73.0293 L79,80.0293 L69,90.0293 L15,90.0293 L15,73.0293 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="1014.9502" style="stroke:#000000;stroke-width:1.0;" width="2496" x="15" y="73.0293"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="19" x="30" y="87.0991">alt</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="238" x="94" y="86.0884">[Send message from native module]</text><polygon fill="#000000" points="633,108.6279,623,112.6279,633,116.6279,629,112.6279" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="627" x2="1299" y1="112.6279" y2="112.6279"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="639" y="107.8984">48</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="376" x="661" y="107.8984">SendMsg(Mod, "some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="142.4272" y2="142.4272"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="142.4272" y2="155.4272"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="155.4272" y2="155.4272"/><polygon fill="#000000" points="633,151.4272,623,155.4272,633,159.4272,629,155.4272" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="137.6978">49</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="469" x="651" y="137.6978">NativeModule::OnMsg(Mod, "some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="185.2266" y2="185.2266"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="185.2266" y2="198.2266"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="198.2266" y2="198.2266"/><polygon fill="#000000" points="633,194.2266,623,198.2266,633,202.2266,629,198.2266" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="180.4971">50</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="642" x="651" y="180.4971">ModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="228.0259" y2="228.0259"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="228.0259" y2="241.0259"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="241.0259" y2="241.0259"/><polygon fill="#000000" points="633,237.0259,623,241.0259,633,245.0259,629,241.0259" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="223.2964">51</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="651" y="223.2964">ipc::Send("some event", target)</text><polygon fill="#000000" points="101,266.8252,91,270.8252,101,274.8252,97,270.8252" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="95" x2="611" y1="270.8252" y2="270.8252"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="107" y="266.0957">52</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="241" x="129" y="266.0957">via stdout: serialized msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="90" x2="132" y1="300.6245" y2="300.6245"/><line style="stroke:#000000;stroke-width:1.0;" x1="132" x2="132" y1="300.6245" y2="313.6245"/><line style="stroke:#000000;stroke-width:1.0;" x1="91" x2="132" y1="313.6245" y2="313.6245"/><polygon fill="#000000" points="101,309.6245,91,313.6245,101,317.6245,97,313.6245" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="97" y="295.895">53</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="310" x="119" y="295.895">ReadFile(stdin) =&gt; deserialize msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="90" x2="132" y1="343.4238" y2="343.4238"/><line style="stroke:#000000;stroke-width:1.0;" x1="132" x2="132" y1="343.4238" y2="356.4238"/><line style="stroke:#000000;stroke-width:1.0;" x1="91" x2="132" y1="356.4238" y2="356.4238"/><polygon fill="#000000" points="101,352.4238,91,356.4238,101,360.4238,97,356.4238" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="97" y="338.6943">54</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="355" x="119" y="338.6943">Orchestrator::OnMessage("some event", target)</text><path d="M25,371.4238 L101,371.4238 L101,378.4238 L91,388.4238 L25,388.4238 L25,371.4238 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="457.3911" style="stroke:#000000;stroke-width:1.0;" width="2137" x="25" y="371.4238"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="31" x="40" y="385.4937">loop</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="153" x="116" y="384.4829">[for all host processes]</text><line style="stroke:#000000;stroke-width:1.0;" x1="90" x2="132" y1="411.0225" y2="411.0225"/><line style="stroke:#000000;stroke-width:1.0;" x1="132" x2="132" y1="411.0225" y2="424.0225"/><line style="stroke:#000000;stroke-width:1.0;" x1="91" x2="132" y1="424.0225" y2="424.0225"/><polygon fill="#000000" points="101,420.0225,91,424.0225,101,428.0225,97,424.0225" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="97" y="406.293">55</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="371" x="119" y="406.293">ChildProcessInstance::Send("some event", target)</text><line style="stroke:#000000;stroke-width:1.0;" x1="90" x2="132" y1="453.8218" y2="453.8218"/><line style="stroke:#000000;stroke-width:1.0;" x1="132" x2="132" y1="453.8218" y2="466.8218"/><line style="stroke:#000000;stroke-width:1.0;" x1="91" x2="132" y1="466.8218" y2="466.8218"/><polygon fill="#000000" points="101,462.8218,91,466.8218,101,470.8218,97,466.8218" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="97" y="449.0923">56</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="119" y="449.0923">ipc::Send("some event", target)</text><polygon fill="#000000" points="600,492.6211,610,496.6211,600,500.6211,604,496.6211" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="90" x2="606" y1="496.6211" y2="496.6211"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="97" y="491.8916">57</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="241" x="119" y="491.8916">via stdout: serialized msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="526.4204" y2="526.4204"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="526.4204" y2="539.4204"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="539.4204" y2="539.4204"/><polygon fill="#000000" points="633,535.4204,623,539.4204,633,543.4204,629,539.4204" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="521.6909">58</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="310" x="651" y="521.6909">ReadFile(stdin) =&gt; deserialize msg/target</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="569.2197" y2="569.2197"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="569.2197" y2="582.2197"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="582.2197" y2="582.2197"/><polygon fill="#000000" points="633,578.2197,623,582.2197,633,586.2197,629,582.2197" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="564.4902">59</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="280" x="651" y="564.4902">ModuleHost::OnMessageFromBroker()</text><path d="M561,597.2197 L637,597.2197 L637,604.2197 L627,614.2197 L561,614.2197 L561,597.2197 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="90.3979" style="stroke:#000000;stroke-width:1.0;" width="823" x="561" y="597.2197"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="31" x="576" y="611.2896">loop</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="155" x="652" y="610.2788">[for all native modules]</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="636.8184" y2="636.8184"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="636.8184" y2="649.8184"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="649.8184" y2="649.8184"/><polygon fill="#000000" points="633,645.8184,623,649.8184,633,653.8184,629,649.8184" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="632.0889">60</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="159" x="651" y="632.0889">NativeModule::Send()</text><polygon fill="#000000" points="1288,675.6177,1298,679.6177,1288,683.6177,1292,679.6177" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="1294" y1="679.6177" y2="679.6177"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="674.8882">61</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="330" x="651" y="674.8882">Native.dll/OnMessage("some event", target)</text><path d="M561,701.6177 L630,701.6177 L630,708.6177 L620,718.6177 L561,718.6177 L561,701.6177 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="120.1973" style="stroke:#000000;stroke-width:1.0;" width="1591" x="561" y="701.6177"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="24" x="576" y="715.6875">opt</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="172" x="645" y="714.6768">[if any managed modules]</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="741.2163" y2="741.2163"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="741.2163" y2="754.2163"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="754.2163" y2="754.2163"/><polygon fill="#000000" points="633,750.2163,623,754.2163,633,758.2163,629,754.2163" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="736.4868">62</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="160" x="651" y="736.4868">ManagedHost::Send()</text><polygon fill="#000000" points="1526,780.0156,1536,784.0156,1526,788.0156,1530,784.0156" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="1532" y1="784.0156" y2="784.0156"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="779.2861">63</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="378" x="651" y="779.2861">ManagedHost.dll/Ipc.MessageFromHostToModule()</text><polygon fill="#000000" points="2048,809.8149,2058,813.8149,2048,817.8149,2052,813.8149" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="1548" x2="2054" y1="813.8149" y2="813.8149"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="1555" y="809.0854">64</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="461" x="1577" y="809.0854">App.OnMessageFromHost("some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="15" x2="2511" y1="836.8149" y2="836.8149"/><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="257" x="20" y="847.874">[Send message from managed module]</text><line style="stroke:#000000;stroke-width:1.0;" x1="2070" x2="2112" y1="872.9829" y2="872.9829"/><line style="stroke:#000000;stroke-width:1.0;" x1="2112" x2="2112" y1="872.9829" y2="885.9829"/><line style="stroke:#000000;stroke-width:1.0;" x1="2071" x2="2112" y1="885.9829" y2="885.9829"/><polygon fill="#000000" points="2081,881.9829,2071,885.9829,2081,889.9829,2077,885.9829" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="2077" y="868.2534">65</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="400" x="2099" y="868.2534">Ipc.SendMessage("some event", serviceGuid, session)</text><polygon fill="#000000" points="633,911.7822,623,915.7822,633,919.7822,629,915.7822" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="627" x2="2059" y1="915.7822" y2="915.7822"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="639" y="911.0527">66</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="572" x="661" y="911.0527">TMHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="945.5815" y2="945.5815"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="945.5815" y2="958.5815"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="958.5815" y2="958.5815"/><polygon fill="#000000" points="633,954.5815,623,958.5815,633,962.5815,629,958.5815" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="940.8521">67</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="617" x="651" y="940.8521">ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="988.3809" y2="988.3809"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="988.3809" y2="1001.3809"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="1001.3809" y2="1001.3809"/><polygon fill="#000000" points="633,997.3809,623,1001.3809,633,1005.3809,629,1001.3809" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="983.6514">68</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="473" x="651" y="983.6514">ModuleHost::OnMessageFromModule(null, "some event", target)</text><line style="stroke:#000000;stroke-width:1.0;" x1="622" x2="664" y1="1031.1802" y2="1031.1802"/><line style="stroke:#000000;stroke-width:1.0;" x1="664" x2="664" y1="1031.1802" y2="1044.1802"/><line style="stroke:#000000;stroke-width:1.0;" x1="623" x2="664" y1="1044.1802" y2="1044.1802"/><polygon fill="#000000" points="633,1040.1802,623,1044.1802,633,1048.1802,629,1044.1802" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="18" x="629" y="1026.4507">69</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="235" x="651" y="1026.4507">ipc::Send("some event", target)</text><path d="M627,1057.1802 L627,1082.1802 L1081,1082.1802 L1081,1067.1802 L1071,1057.1802 L627,1057.1802 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><path d="M1071,1057.1802 L1071,1067.1802 L1081,1067.1802 L1071,1057.1802 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="433" x="633" y="1075.25">dispatch further same as with native module as msg source</text><!--MD5=[e489aaa24196743ceca0dbde59948d41]
@startuml IPC
!theme plain
hide footbox

autonumber
participant TMBroker as B
participant TMHost as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant "ManagedModule\nSomeAppModule" as MM

B->B: Orchestrator::Init() => read broker.json\nUpdateChildProcessConfig(),LaunchChildProcesses()

loop Launch processes
    B->B: ChildProcessInstance::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcessInstance::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember unique host target GUID
    H->H: ModuleHost::OnMessageFromBroker()
    B->B: ChildProcessInstance::LoadModules()
end

newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule(OnMsg, OnDiag)
    NM->B: SendMsg ModuleMeta (our services)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
    MM->B: SendMsg ModuleMeta (our services)
else Load managed EXE module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MM ++: load SomeAppModule.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    MM->B: SendMsg ModuleMeta (our services)
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: TMHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: ModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: Orchestrator::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcessInstance::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: ModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: TMHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: ModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

@startuml IPC







<style>
  root {
    BackgroundColor white
    FontColor black
    FontName Verdana
    HyperLinkColor blue
    LineColor black
    LineThickness 1
    Margin 5
  }
  caption {
    LineThickness 0
  }
  footer {
    LineThickness 0
  }
  header {
    LineThickness 0
  }
  node {
    MaximumWidth 300
  }
  title {
    FontSize 22
    LineThickness 0
  }
</style>

skinparam ArrowLollipopColor black
skinparam BackgroundColor white
skinparam DefaultFontName Verdana
skinparam DefaultMonospacedFontName Courier
skinparam LifelineStrategy nosolid
skinparam ParticipantPadding 10
skinparam SequenceLifeLineBorderColor black
skinparam Shadowing false
skinparam UseBetaStyle true

skinparam Activity {
  BackgroundColor white
  BarColor black
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam Boundary {
  FontColor black
}
skinparam Box {
  Padding 5
}
skinparam CircledCharacter {
  FontColor black
  FontName Courier
  Radius 9
}
skinparam Class {
  BackgroundColor white
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam ClassAttribute {
  FontColor black
  FontName Verdana
}
skinparam ClassStereotype {
  FontColor black
  FontName Verdana
}
skinparam Footer {
  FontColor black
  FontName Verdana
}
skinparam Header {
  FontColor black
  FontName Verdana
}
skinparam Hyperlink {
  Color blue
}
skinparam IconPackage {
  Color black
  BackgroundColor white
}
skinparam IconPrivate {
  Color black
  BackgroundColor white
}
skinparam IconProtected {
  Color black
  BackgroundColor white
}
skinparam IconPublic {
  Color black
  BackgroundColor white
}
skinparam Note {
  FontColor black
  FontName Verdana
}
skinparam Object {
  BorderColor black
}
skinparam Package {
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam State {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeA {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeC {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeE {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeI {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeN {
  BackgroundColor white
  BorderColor black
}
skinparam UseCaseStereoType {
  FontColor black
  FontName Verdana
}
hide footbox

autonumber
participant TMBroker as B
participant TMHost as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant "ManagedModule\nSomeAppModule" as MM

B->B: Orchestrator::Init() => read broker.json\nUpdateChildProcessConfig(),LaunchChildProcesses()

loop Launch processes
    B->B: ChildProcessInstance::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcessInstance::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember unique host target GUID
    H->H: ModuleHost::OnMessageFromBroker()
    B->B: ChildProcessInstance::LoadModules()
end

newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule(OnMsg, OnDiag)
    NM->B: SendMsg ModuleMeta (our services)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
    MM->B: SendMsg ModuleMeta (our services)
else Load managed EXE module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: ModuleHost::OnMessageFromBroker()
    H->H: ModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: ModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MM ++: load SomeAppModule.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    MM->B: SendMsg ModuleMeta (our services)
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: TMHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: ModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: Orchestrator::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcessInstance::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: ModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: TMHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: ModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

PlantUML version 1.2022.0(Tue Jan 11 17:16:42 CET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>