<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="456px" preserveAspectRatio="none" style="width:2609px;height:456px;background:#FFFFFF;" version="1.1" viewBox="0 0 2609 456" width="2609px" zoomAndPan="magnify"><defs/><g><rect fill="#FFFFFF" height="260.7959" style="stroke:#000000;stroke-width:1.0;" width="10" x="630.5" y="179.2119"/><rect fill="#FFFFFF" height="334.1938" style="stroke:#000000;stroke-width:1.0;" width="995.5" x="25" y="96.814"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="108" x2="108" y1="37.0146" y2="449.0078"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="635" x2="635" y1="37.0146" y2="449.0078"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1391.5" x2="1391.5" y1="37.0146" y2="449.0078"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="1629" x2="1629" y1="37.0146" y2="449.0078"/><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:5.0,5.0;" x1="2146.5" x2="2146.5" y1="37.0146" y2="449.0078"/><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="127" x="45" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="113" x="52" y="26.0752">BrokerProcess</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="109" x="581" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="95" x="588" y="26.0752">HostProcess</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="118" x="1332.5" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="104" x="1339.5" y="26.0752">NativeModule</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="175" x="1542" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="161" x="1549" y="26.0752">ManagedModuleHost</text><rect fill="#FFFFFF" height="31.0146" style="stroke:#000000;stroke-width:1.0;" width="140" x="2076.5" y="5"/><text fill="#000000" font-family="Verdana" font-size="14" lengthAdjust="spacing" textLength="126" x="2083.5" y="26.0752">ManagedModule</text><rect fill="#FFFFFF" height="260.7959" style="stroke:#000000;stroke-width:1.0;" width="10" x="630.5" y="179.2119"/><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="68.814" y2="68.814"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="68.814" y2="81.814"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="81.814" y2="81.814"/><polygon fill="#000000" points="119.5,77.814,109.5,81.814,119.5,85.814,115.5,81.814" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="64.0845">1</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="335" x="128.5" y="64.0845">BrokerInstance::Init() =&gt; process broker.json</text><path d="M25,96.814 L101,96.814 L101,103.814 L91,113.814 L25,113.814 L25,96.814 " fill="#FFFFFF" style="stroke:#000000;stroke-width:1.0;"/><rect fill="none" height="334.1938" style="stroke:#000000;stroke-width:1.0;" width="995.5" x="25" y="96.814"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="31" x="40" y="110.8838">loop</text><text fill="#000000" font-family="Verdana" font-size="11" font-weight="bold" lengthAdjust="spacing" textLength="128" x="116" y="109.873">[Launch processes]</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="136.4126" y2="136.4126"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="136.4126" y2="149.4126"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="149.4126" y2="149.4126"/><polygon fill="#000000" points="119.5,145.4126,109.5,149.4126,119.5,153.4126,115.5,149.4126" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="131.6831">2</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="169" x="128.5" y="131.6831">ChildProcess::Launch()</text><polygon fill="#000000" points="618.5,175.2119,628.5,179.2119,618.5,183.2119,622.5,179.2119" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="624.5" y1="179.2119" y2="179.2119"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="174.4824">3</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="180" x="128.5" y="174.4824">CreateProcess/AsUser()</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="209.0112" y2="209.0112"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="209.0112" y2="222.0112"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="222.0112" y2="222.0112"/><polygon fill="#000000" points="119.5,218.0112,109.5,222.0112,119.5,226.0112,115.5,222.0112" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="204.2817">4</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="277" x="128.5" y="204.2817">ipc::StartRead(),StartForwardStderr()</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="251.8105" y2="251.8105"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="251.8105" y2="264.8105"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="264.8105" y2="264.8105"/><polygon fill="#000000" points="119.5,260.8105,109.5,264.8105,119.5,268.8105,115.5,264.8105" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="247.0811">5</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="192" x="128.5" y="247.0811">start child proc monitoring</text><polygon fill="#000000" points="618.5,290.6099,628.5,294.6099,618.5,298.6099,622.5,294.6099" style="stroke:#000000;stroke-width:1.0;"/><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="624.5" y1="294.6099" y2="294.6099"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="289.8804">6</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="384" x="128.5" y="289.8804">ChildProcess::SendMsg(ipc::KnownService::HostInit)</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="324.4092" y2="324.4092"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="324.4092" y2="337.4092"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="337.4092" y2="337.4092"/><polygon fill="#000000" points="651.5,333.4092,641.5,337.4092,651.5,341.4092,647.5,337.4092" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="647.5" y="319.6797">7</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="204" x="660.5" y="319.6797">Remember host target GUID</text><line style="stroke:#000000;stroke-width:1.0;" x1="640.5" x2="682.5" y1="367.2085" y2="367.2085"/><line style="stroke:#000000;stroke-width:1.0;" x1="682.5" x2="682.5" y1="367.2085" y2="380.2085"/><line style="stroke:#000000;stroke-width:1.0;" x1="641.5" x2="682.5" y1="380.2085" y2="380.2085"/><polygon fill="#000000" points="651.5,376.2085,641.5,380.2085,651.5,384.2085,647.5,380.2085" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="647.5" y="362.479">8</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="348" x="660.5" y="362.479">UniversalModuleHost::OnMessageFromBroker()</text><line style="stroke:#000000;stroke-width:1.0;" x1="108.5" x2="150.5" y1="410.0078" y2="410.0078"/><line style="stroke:#000000;stroke-width:1.0;" x1="150.5" x2="150.5" y1="410.0078" y2="423.0078"/><line style="stroke:#000000;stroke-width:1.0;" x1="109.5" x2="150.5" y1="423.0078" y2="423.0078"/><polygon fill="#000000" points="119.5,419.0078,109.5,423.0078,119.5,427.0078,115.5,423.0078" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="Verdana" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="9" x="115.5" y="405.2783">9</text><text fill="#000000" font-family="Verdana" font-size="13" lengthAdjust="spacing" textLength="212" x="128.5" y="405.2783">ChildProcess::LoadModules()</text><line style="stroke:#000000;stroke-width:1.0;stroke-dasharray:2.0,2.0;" x1="5" x2="2602.5" y1="438.0078" y2="438.0078"/><!--MD5=[78fe12c2f94c9aef74f103e129da7fa6]
@startuml IPC
!theme plain
hide footbox

autonumber
participant BrokerProcess as B
participant HostProcess as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant ManagedModule as MM

B->B: BrokerInstance::Init() => process broker.json
loop Launch processes
    B->B: ChildProcess::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcess::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember host target GUID
    H->H: UniversalModuleHost::OnMessageFromBroker()
    B->B: ChildProcess::LoadModules()
end
    
newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule()
    H->NM: ConnectModule(OnMsg, OnDiag)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: UniversalModuleHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: UniversalModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: BrokerInstance::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcess::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: UniversalModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: UniversalModuleHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: UniversalModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

@startuml IPC







<style>
  root {
    BackgroundColor white
    FontColor black
    FontName Verdana
    HyperLinkColor blue
    LineColor black
    LineThickness 1
    Margin 5
  }
  caption {
    LineThickness 0
  }
  footer {
    LineThickness 0
  }
  header {
    LineThickness 0
  }
  node {
    MaximumWidth 300
  }
  title {
    FontSize 22
    LineThickness 0
  }
</style>

skinparam ArrowLollipopColor black
skinparam BackgroundColor white
skinparam DefaultFontName Verdana
skinparam DefaultMonospacedFontName Courier
skinparam LifelineStrategy nosolid
skinparam ParticipantPadding 10
skinparam SequenceLifeLineBorderColor black
skinparam Shadowing false
skinparam UseBetaStyle true

skinparam Activity {
  BackgroundColor white
  BarColor black
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam Boundary {
  FontColor black
}
skinparam Box {
  Padding 5
}
skinparam CircledCharacter {
  FontColor black
  FontName Courier
  Radius 9
}
skinparam Class {
  BackgroundColor white
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam ClassAttribute {
  FontColor black
  FontName Verdana
}
skinparam ClassStereotype {
  FontColor black
  FontName Verdana
}
skinparam Footer {
  FontColor black
  FontName Verdana
}
skinparam Header {
  FontColor black
  FontName Verdana
}
skinparam Hyperlink {
  Color blue
}
skinparam IconPackage {
  Color black
  BackgroundColor white
}
skinparam IconPrivate {
  Color black
  BackgroundColor white
}
skinparam IconProtected {
  Color black
  BackgroundColor white
}
skinparam IconPublic {
  Color black
  BackgroundColor white
}
skinparam Note {
  FontColor black
  FontName Verdana
}
skinparam Object {
  BorderColor black
}
skinparam Package {
  BorderColor black
  FontColor black
  FontName Verdana
}
skinparam State {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeA {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeC {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeE {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeI {
  BackgroundColor white
  BorderColor black
}
skinparam StereotypeN {
  BackgroundColor white
  BorderColor black
}
skinparam UseCaseStereoType {
  FontColor black
  FontName Verdana
}
hide footbox

autonumber
participant BrokerProcess as B
participant HostProcess as H
participant NativeModule as NM
participant ManagedModuleHost as MMH
participant ManagedModule as MM

B->B: BrokerInstance::Init() => process broker.json
loop Launch processes
    B->B: ChildProcess::Launch()
    B->H ++: CreateProcess/AsUser()
    B->B: ipc::StartRead(),StartForwardStderr()
    B->B: start child proc monitoring
    B->H: ChildProcess::SendMsg(ipc::KnownService::HostInit)
    H->H: Remember host target GUID
    H->H: UniversalModuleHost::OnMessageFromBroker()
    B->B: ChildProcess::LoadModules()
end
    
newpage

alt Load native module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadNativeModule(path/to/dll)
    H->H: NativeModule::Load()
    H->NM ++: LoadLibrary native dll
    H->NM: InitModule()
    H->NM: ConnectModule(OnMsg, OnDiag)
else Load managed DLL module
    B->H: ipc::Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, host-target)
    H->H: UniversalModuleHost::OnMessageFromBroker()
    H->H: UniversalModuleHost::LoadModule()
    H->H: check PE header for module type
    H->H: UniversalModuleHost::LoadManagedDllModule(path/to/dll)
    H->H: Load .Net CLR if not yet done
    H->MMH ++: load ManagedHost.dll in custom .Net host
    H->H: ManagedHost::LoadModule(path/to/dll)
    H->H: Send(ipc::HostCmdMsg::Cmd::CtrlModule/Load, ipc::KnownService::ManagedHost)
    H->MMH: invoke native->managed Ipc.MessageFromHostToModule()
    MMH->MMH: ManagedHost.Program.OnMessageFromHost()
    MMH->MMH: ModuleHost.LoadModule(path/to/dll)
    MMH->MM ++: Load dll in own AssemblyLoadContext
    MMH->MM: IModule.Initialize()
end

newpage

alt Send diagnostics from native module
    NM->NM: spdlog::info("hello world")
    NM->H: via stderr: "[INF] hello world"
else Send diagnostics from managed module
    MM->MM: _logger.Information("hello world")
    MM->H: UniversalModuleHost.exe/OnLog(2, "hello world")
    H->H: SPDLOG_LOGGER_CALL(default_logger, 2, "hello world")
end

newpage

alt Send message from native module
    NM->H: SendMsg(Mod, "some event", serviceGuid, session)
    H->H: NativeModule::OnMsg(Mod, "some event", serviceGuid, session)
    H->H: UniversalModuleHost::OnMessageFromModule(Mod, "some event", Target(serviceGuid, session))
    H->H: ipc::Send("some event", target)
    H->B: via stdout: serialized msg/target
    B->B: ReadFile(stdin) => deserialize msg/target
    B->B: BrokerInstance::OnMessage("some event", target)
    loop for all host processes
        B->B: ChildProcess::Send("some event", target)
        B->B: ipc::Send("some event", target)
        B->H: via stdout: serialized msg/target
        H->H: ReadFile(stdin) => deserialize msg/target
        H->H: UniversalModuleHost::OnMessageFromBroker()
        loop for all native modules
            H->H: NativeModule::Send()
            H->NM: Native.dll/OnMessage("some event", target)
        end
        opt if any managed modules
            H->H: ManagedHost::Send()
            H->MMH: ManagedHost.dll/Ipc.MessageFromHostToModule()
            MMH->MM: App.OnMessageFromHost("some event", serviceGuid, session)
        end
    end
else Send message from managed module
    MM->MM: Ipc.SendMessage("some event", serviceGuid, session)
    MM->H: UniversalModuleHost.exe/MessageFromModuleToHost("some event", serviceGuid, session)
    H->H: ManagedHost::OnMessageFromModule("some event", Target(serviceGuid, session))
    H->H: UniversalModuleHost::OnMessageFromModule(null, "some event", target)
    H->H: ipc::Send("some event", target)
    Note right of H: dispatch further same as with native module as msg source
end
@enduml

PlantUML version 1.2022.0(Tue Jan 11 17:16:42 CET 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>